// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_tour/test/mocks/mocks_runner.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_tour/core/error/failures.dart' as _i5;
import 'package:restaurant_tour/features/restaurants/data/data_sources/restaurants_remote_data_source.dart'
    as _i7;
import 'package:restaurant_tour/features/restaurants/data/models/restaurant_model.dart'
    as _i8;
import 'package:restaurant_tour/features/restaurants/domain/entities/restaurant.dart'
    as _i6;
import 'package:restaurant_tour/features/restaurants/domain/repositories/restaurants_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class RestaurantsRepositoryMock extends _i1.Mock
    implements _i3.RestaurantsRepository {
  RestaurantsRepositoryMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Restaurant>>> restaurantsList() =>
      (super.noSuchMethod(
        Invocation.method(
          #restaurantsList,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Restaurant>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Restaurant>>(
          this,
          Invocation.method(
            #restaurantsList,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Restaurant>>>);
}

/// A class which mocks [RestaurantsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class RestaurantsRemoteDataSourceMock extends _i1.Mock
    implements _i7.RestaurantsRemoteDataSource {
  RestaurantsRemoteDataSourceMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i8.RestaurantModel>> restaurantsList() =>
      (super.noSuchMethod(
        Invocation.method(
          #restaurantsList,
          [],
        ),
        returnValue: _i4.Future<List<_i8.RestaurantModel>>.value(
            <_i8.RestaurantModel>[]),
      ) as _i4.Future<List<_i8.RestaurantModel>>);
}
